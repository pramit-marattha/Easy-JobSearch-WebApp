{"version":3,"sources":["useEasyJobSearch.js","GitJobList.js","JobsPagination.js","SearchForm.js","App.js","serviceWorker.js","index.js"],"names":["ACTIONS","reducer","state","action","type","loading","jobs","payload","error","hasNextPage","GitJobList","job","useState","open","setOpen","Card","className","Body","height","alt","company","src","company_logo","Badge","variant","location","Title","title","style","wordBreak","source","how_to_apply","Subtitle","Date","created_at","toLocaleDateString","year","month","day","Text","Button","onClick","prevOpen","Collapse","in","description","JobsPagination","page","setPage","addjustPage","amount","prevPage","Pagination","Prev","Item","Ellipsis","active","Next","SearchForm","params","onParamChange","Form","Row","Group","as","Col","Label","Control","onChange","value","name","full_time","App","setParams","useReducer","dispatch","useEffect","cancelTokenOne","axios","CancelToken","get","cancelToken","token","markdown","then","res","data","catch","e","isCancel","cancelTokenTwo","length","cancel","useEasyJobSearch","Container","param","target","prevParams","Spinner","classsName","animation","map","key","id","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.5255d904.chunk.js","sourcesContent":["import { useReducer, useEffect } from 'react';\r\nimport axios from 'axios'\r\n\r\n\r\nconst ACTIONS = {\r\n    MAKE_REQUEST: 'make-request',\r\n    GET_DATA: 'get-data',\r\n    ERROR: 'error',\r\n    UPDATE_HAS_NEXT_PAGE: 'update-has-next-page'\r\n}\r\n\r\n\r\nconst BASE_URL = '/positions.json'\r\n\r\nfunction reducer(state, action) {\r\n    switch (action.type) {\r\n        case ACTIONS.MAKE_REQUEST:\r\n            return { loading: true, jobs: [] }\r\n        case ACTIONS.GET_DATA:\r\n            return { ...state, loading: false, jobs: action.payload.jobs }\r\n        case ACTIONS.ERROR:\r\n            return { ...state, loading: false, jobs: action.payload.error, jobs: [] }\r\n        case ACTIONS.UPDATE_HAS_NEXT_PAGE:\r\n            return { ...state, hasNextPage: action.payload.hasNextPage }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default function useEasyJobSearch(params, page) {\r\n    const [state, dispatch] = useReducer(reducer, { jobs: [], loading: true })\r\n\r\n    useEffect(() => {\r\n        const cancelTokenOne = axios.CancelToken.source()\r\n        dispatch({ type: ACTIONS.MAKE_REQUEST })\r\n        axios.get(BASE_URL, {\r\n            cancelToken: cancelTokenOne.token,\r\n            params: { markdown: true, page: page, ...params }\r\n        }).then(res => {\r\n            dispatch({ type: ACTIONS.GET_DATA, payload: { jobs: res.data } })\r\n        }).catch(e => {\r\n            if (axios.isCancel(e)) return\r\n            dispatch({ type: ACTIONS.ERROR, payload: { error: e } })\r\n        })\r\n\r\n        const cancelTokenTwo = axios.CancelToken.source()\r\n        axios.get(BASE_URL, {\r\n            cancelToken: cancelTokenTwo.token,\r\n            params: { markdown: true, page: page + 1, ...params }\r\n        }).then(res => {\r\n            dispatch({ type: ACTIONS.UPDATE_HAS_NEXT_PAGE, payload: { hasNextPage: res.data.length !== 0 } })\r\n        }).catch(e => {\r\n            if (axios.isCancel(e)) return\r\n            dispatch({ type: ACTIONS.ERROR, payload: { error: e } })\r\n        })\r\n\r\n        return () => {\r\n            cancelTokenOne.cancel()\r\n            cancelTokenTwo.cancel()\r\n\r\n        }\r\n\r\n    }, [params, page])\r\n\r\n    return state\r\n}","import React, { useState } from 'react'\r\nimport { Card, Badge, Button, Collapse } from 'react-bootstrap'\r\nimport ReactMarkdown from 'react-markdown'\r\n\r\nexport default function GitJobList({ job }) {\r\n    const [open, setOpen] = useState(false)\r\n\r\n    return (\r\n        <Card className=\"mb-4 mt-4\">\r\n            <Card.Body>\r\n\r\n                <div className=\"d-flex justify-content-between\">\r\n                    <div>\r\n                        <img className=\"mr-5 mb-2\" height=\"60\" alt={job.company} src={job.company_logo} />\r\n                        <Badge variant=\"primary\" className=\"mr-3 mb-7\">{job.type}</Badge>\r\n                        <Badge variant=\"info\" className=\"mr-3 mb-7\">{job.location}</Badge>\r\n\r\n                        <Card.Title>\r\n                            {job.title} - <span className=\"font-weight-light\">{job.company}</span>\r\n                        </Card.Title>\r\n\r\n                        <div style={{ wordBreak: 'break-all' }}>\r\n                            <ReactMarkdown source={job.how_to_apply} />\r\n                        </div>\r\n\r\n                    </div>\r\n                    <Card.Subtitle className=\"font-weight-light\">\r\n                        {new Date(job.created_at).toLocaleDateString([], { year: 'numeric', month: 'long', day: 'numeric' })}\r\n                    </Card.Subtitle>\r\n                </div>\r\n\r\n                <Card.Text>\r\n                    <Button onClick={() => setOpen(prevOpen => !prevOpen)} variant=\"info\"> {open ? '⬆⬆⬆' : 'More⬇⬇⬇'}</Button>\r\n                </Card.Text>\r\n                <Collapse in={open}>\r\n                    <div className=\"mt-4 justify-content-center\" style={{ wordBreak: 'break-all' }}>\r\n                        <ReactMarkdown source={job.description} />\r\n                    </div>\r\n                </Collapse>\r\n            </Card.Body>\r\n\r\n        </Card>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Pagination } from 'react-bootstrap'\r\n\r\nexport default function JobsPagination({ page, setPage, hasNextPage }) {\r\n    function addjustPage(amount) {\r\n        setPage(prevPage => prevPage + amount)\r\n    }\r\n\r\n    return (\r\n        <Pagination>\r\n            {page !== 1 && < Pagination.Prev onClick={() => addjustPage(-1)} />}\r\n            {page !== 1 && < Pagination.Item onClick={() => setPage(1)}>1</Pagination.Item>}\r\n            {page > 2 && < Pagination.Ellipsis />}\r\n            {page > 2 && <Pagination.Item onClick={() => addjustPage(-1)}>{page - 1} </Pagination.Item>}\r\n            <Pagination.Item active>{page} </Pagination.Item>\r\n            {hasNextPage && <Pagination.Item onClick={() => addjustPage(1)}>{page + 1} </Pagination.Item>}\r\n            {hasNextPage && <Pagination.Next onClick={() => addjustPage(1)} />}\r\n        </Pagination >\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Form, Col } from 'react-bootstrap'\r\n\r\nexport default function SearchForm({ params, onParamChange }) {\r\n    return (\r\n        <div>\r\n            <Form className=\"mb-4\">\r\n                <Form.Row className=\"align-items-end\">\r\n                    <Form.Group as={Col} >\r\n                        <Form.Label>Job Title</Form.Label>\r\n                        <Form.Control onChange={onParamChange} value={params.title} name=\"title\" type=\"text\" />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} >\r\n                        <Form.Label>Job description</Form.Label>\r\n                        <Form.Control onChange={onParamChange} value={params.description} name=\"description\" type=\"text\" />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} >\r\n                        <Form.Label>location</Form.Label>\r\n                        <Form.Control onChange={onParamChange} value={params.location} name=\"location\" type=\"text\" />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} >\r\n                        <Form.Label>Company name</Form.Label>\r\n                        <Form.Control onChange={onParamChange} value={params.company} name=\"company\" type=\"text\" />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group as={Col} >\r\n                        <Form.Label>Job type</Form.Label>\r\n                        <Form.Control onChange={onParamChange} value={params.full_time} name=\"full_time\" type=\"text\" />\r\n                    </Form.Group>\r\n                </Form.Row>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\nimport useEasyJobSearch from './useEasyJobSearch'\nimport { Container, Spinner } from 'react-bootstrap'\nimport GitJobList from './GitJobList'\nimport JobsPagination from './JobsPagination'\nimport SearchForm from './SearchForm';\n\nfunction App() {\n  const [params, setParams] = useState({})\n  const [page, setPage] = useState(1)\n  const { jobs, loading, error, hasNextPage } = useEasyJobSearch(params, page)\n\n\n  function handleParamChange(e) {\n    const param = e.target.name\n    const value = e.target.value\n    setPage(1)\n    setParams(prevParams => {\n      return { ...prevParams, [param]: value }\n    })\n  }\n\n  return (\n    <Container className=\"my-5\">\n      <h1 className=\"font-weight-bold mb-5\">\"SearchJobHub\" - <span className=\"text-muted font-weight-light mb-10\" >Easy Job search</span> </h1>\n      <SearchForm params={params} onParamChange={handleParamChange} />\n      {loading && <Spinner classsName=\"mb-5 mt-5\" animation=\"grow\" variant=\"info\" >\n        <span className=\"sr-only\">Loading...</span>\n      </Spinner>\n\n      }\n      {error && <h1>Reload</h1>}\n      {\n        jobs.map(job => {\n          return <GitJobList key={job.id} job={job} />\n        })\n      }\n      <JobsPagination page={page} setPage={setPage} hasNextPage={hasNextPage} />\n    </Container >\n\n  )\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}